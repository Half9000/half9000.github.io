<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python 开发环境管理小记</title>
    <url>/2020/06/14/Awesome-Python-Environment-for-Developer/</url>
    <content><![CDATA[<h1 id="写在前面">写在前面</h1>
<p>经过许多折腾，终于找到了<strong>适合自己</strong>的 Python 开发环境管理。</p>
<p>本文仅作记录用，不定期更新。</p>
<p><strong><em>注：笔者所使用的平台为 Windows 10 + WSL (Ubuntu 18.04)</em></strong></p>
<h1 id="python-版本管理工具----pyenv">Python 版本管理工具 -- pyenv</h1>
<p>Python 的版本迭代较为迅速，截止至本文发布日期 （2020-06-14），最新的版本号为：<a href="https://docs.python.org/3.9/whatsnew/3.9.html" target="_blank" rel="noopener">3.9.0b3</a> 。</p>
<p>由于不同项目的需求不同，管理开发环境的 Python 版本势在必行。</p>
<p><code>pyenv</code> 是一个优秀的 Python 解释器版本管理工具：</p>
<blockquote>
<p>pyenv lets you easily switch between multiple versions of Python.</p>
<p>pyenv 可以让你轻松地在多个 Python 版本间来回切换。</p>
<p>It's simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well.</p>
<p>它简单，不显眼，且遵循 UNIX 传统 -- 单一目标的工具只专注于做好该事。</p>
</blockquote>
<h2 id="安装-pyenv">安装 pyenv</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/pyenv/pyenv#installation</span></span><br><span class="line"><span class="comment"># https://github.com/pyenv/pyenv-installer#installation--update--uninstallation</span></span><br><span class="line">curl https://pyenv.run | bash</span><br><span class="line"><span class="comment"># restart shell</span></span><br><span class="line"><span class="built_in">exec</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>
<p>运行 <code>pyenv install --list</code>，若 <code>pyenv</code> 安装成功，终端会输出可安装的 Python 解释器版本。</p>
<a id="more"></a>
<h2 id="pyenv-的使用">pyenv 的使用</h2>
<h3 id="使用-pyenv-安装并配置-python-解释器">使用 pyenv 安装并配置 Python 解释器</h3>
<p>在使用 <code>pyenv</code> 安装 Python 解释器之前，需先解决 Python 的编译依赖 -- <code>pyenv</code> 通过本地编译的方式安装不同版本的 Python 解释器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-dep python3.6</span><br><span class="line"><span class="comment"># 或者：</span></span><br><span class="line">sudo apt-get install build-essential libsqlite3-dev sqlite3 bzip2 libbz2-dev zlib1g-dev libssl-dev openssl libgdbm-dev libgdbm-compat-dev liblzma-dev libreadline-dev libncursesw5-dev libffi-dev uuid-dev</span><br></pre></td></tr></table></figure>
<p>在处理完相关依赖后，即可使用 <code>pyenv</code> 安装 Python 解释器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv install -v 3.6.9 </span><br><span class="line">pyenv install -v 3.7.6</span><br><span class="line">pyenv install -v 3.8.3</span><br></pre></td></tr></table></figure>
<p><code>pyenv versions</code> 可查看当前已安装的 Python 解释器版本。</p>
<p>环境设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把 3.7.6 设置为全局默认解释器</span></span><br><span class="line">pyenv global 3.7.6</span><br><span class="line"><span class="comment"># 把 3.6.9 设为当前 shell/session 的默认解释器</span></span><br><span class="line">pyenv shell 3.6.9</span><br><span class="line"><span class="comment"># 把 3.8.3 设为当前目录下的默认解释器</span></span><br><span class="line">pyenv <span class="built_in">local</span> 3.8.3</span><br></pre></td></tr></table></figure>
<h3 id="pyenv-环境管理">pyenv 环境管理</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 tools 虚拟环境</span></span><br><span class="line">pyenv viirtualenv 3.7.6 tools</span><br><span class="line"><span class="comment"># 激活 tools 环境</span></span><br><span class="line">pyenv activate tools</span><br><span class="line"><span class="comment"># 安装 CLI 工具，如 pipx 和 poetry</span></span><br><span class="line">python -m pip install pipx</span><br><span class="line"><span class="comment"># pipx install poetry</span></span><br><span class="line">python -m pip install poetry</span><br><span class="line"><span class="comment"># 退出 tools 虚拟环境</span></span><br><span class="line">pyenv deactivate</span><br><span class="line"><span class="comment"># 设置 tools 为全局变量</span></span><br><span class="line">pyenv global 3.7.6 tools</span><br><span class="line"><span class="comment"># poetry 和 pipx 可以在全局环境下直接使用</span></span><br><span class="line">poetry --version</span><br><span class="line">pipx --version</span><br></pre></td></tr></table></figure>
<h3 id="延伸阅读">延伸阅读</h3>
<ul>
<li><a href="https://github.com/pyenv/pyenv/blob/master/README.md" target="_blank" rel="noopener">pyenv 官方文档</a></li>
<li><a href="https://github.com/pyenv/pyenv/blob/master/COMMANDS.md" target="_blank" rel="noopener">pyenv 命令手册</a></li>
<li><a href="https://github.com/pyenv/pyenv-virtualenv/blob/master/README.md" target="_blank" rel="noopener">pyenv-virtualenv 官方文档</a></li>
</ul>
<h1 id="python-包和依赖管理工具----poetry">Python 包和依赖管理工具 -- Poetry</h1>
<blockquote>
<p>Poetry is a tool for dependency management and packaging in Python.</p>
<p>Poetry 是一个 Python 的依赖管理和打包工具。</p>
<p>It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.</p>
<p>它允许你声明项目所依赖的库，并为你管理 (安装/更新) 它们。</p>
</blockquote>
<h2 id="安装">安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推荐使用 pyenv+virtualenv 的安装方式</span></span><br><span class="line"><span class="comment"># 1. 使用 pip 或者 pipx 安装</span></span><br><span class="line">python -m pip install poetry</span><br><span class="line"><span class="comment"># 2. 使用 Poetry 所提供的脚本进行安装</span></span><br><span class="line">curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python</span><br></pre></td></tr></table></figure>
<h2 id="配置">配置</h2>
<p>在项目目录下创建虚拟环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">poetry config virtualenvs.in-project <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>设置 pypi 镜像源：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip config set global.index-url https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>
<p>或者在 <code>Poetry</code> 项目下手动设置，编辑 <code>pyproject.toml</code>：</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[[tool.poetry.source]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"tsinghua"</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">"https://pypi.tuna.tsinghua.edu.cn/simple"</span></span><br></pre></td></tr></table></figure>
<h2 id="使用-poetry">使用 Poetry</h2>
<p>新建项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">poetry new demo</span><br><span class="line"><span class="comment"># tree</span></span><br><span class="line"><span class="comment"># demo</span></span><br><span class="line"><span class="comment"># ├── pyproject.toml</span></span><br><span class="line"><span class="comment"># ├── README.rst</span></span><br><span class="line"><span class="comment"># ├── demo</span></span><br><span class="line"><span class="comment"># │   └── __init__.py</span></span><br><span class="line"><span class="comment"># └── tests</span></span><br><span class="line"><span class="comment">#     ├── __init__.py</span></span><br><span class="line"><span class="comment">#     └── test_demo.py</span></span><br></pre></td></tr></table></figure>
<p>添加依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">poetry add django</span><br><span class="line"><span class="comment"># 添加开发依赖</span></span><br><span class="line">poetry add black --dev</span><br></pre></td></tr></table></figure>
<p>安装依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 仅生产依赖</span><br><span class="line">poetry install --no-dev</span><br><span class="line"># 所有依赖</span><br><span class="line">poetry install</span><br></pre></td></tr></table></figure>
<h2 id="延伸阅读-1">延伸阅读</h2>
<ul>
<li><a href="https://python-poetry.org/docs/cli/" target="_blank" rel="noopener">Poetry 命令行手册</a></li>
<li><a href="https://python-poetry.org/docs/configuration/" target="_blank" rel="noopener">Poetry 配置手册</a></li>
</ul>
]]></content>
      <categories>
        <category>工欲善其事</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>WSL</tag>
        <tag>Ubuntu</tag>
        <tag>环境配置&amp;部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 折腾小记</title>
    <url>/2020/06/13/Blog-Setup-with-Hexo-GithubPages/</url>
    <content><![CDATA[<h1 id="写在前面">写在前面</h1>
<p>因为刚结束学业，加之暂时赋 <del>dai</del> 闲 <del>ye</del> 在家， 萌生出想要记录一些平时写码或者玩工具的个人经验，于是就有了本文的诞生。</p>
<p>本文非<strong><em>教程向</em></strong>， 仅用来作为笔者的备忘录。</p>
<h1 id="配置环境">配置环境</h1>
<p><em>注：此处笔者所用的环境是 Windows 10 + WSL (Ubuntu 18.04)</em></p>
<h2 id="安装配置-nvm可选和-node.js">安装配置 nvm（可选）和 Node.js</h2>
<p><strong>nvm 安装 (可选)</strong></p>
<p>Node Version Manager (nvm) 是 <code>Node.js</code> 版本管理工具，类似于 <code>Python</code> 的 <code>pyenv</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/nvm-sh/nvm#installing-and-updating</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure>
<p><strong>node 安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有安装 nvm</span></span><br><span class="line">nvm install --lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有安装 nvm，使用包管理工具安装</span></span><br><span class="line"><span class="comment"># 参考：https://github.com/nodesource/distributions/blob/master/README.md#deb</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动安装</span></span><br><span class="line"><span class="comment"># 参考： https://github.com/nodejs/help/wiki/Installation</span></span><br><span class="line"><span class="built_in">export</span> VERSION=v10.15.0</span><br><span class="line"><span class="built_in">export</span> DISTRO=linux-x64</span><br><span class="line">sudo mkdir -p /usr/<span class="built_in">local</span>/lib/nodejs</span><br><span class="line">sudo tar -xJvf node-<span class="variable">$VERSION</span>-<span class="variable">$DISTRO</span>.tar.xz -C /usr/<span class="built_in">local</span>/lib/nodejs </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=/usr/local/lib/nodejs/node-<span class="variable">$VERSION</span>-<span class="variable">$DISTRO</span>/bin:<span class="variable">$PATH</span>"</span> &gt;&gt; ~/.profile</span><br><span class="line">. ~/.profile</span><br><span class="line"><span class="built_in">exec</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>
<p><strong>安装 cnpm</strong> 由于 <code>npm</code> 的官方镜像在国内的连接性十分堪忧，所以使用淘宝的 <code>cnpm</code> 代替</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://developer.aliyun.com/mirror/NPM</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="安装-hexo-工具及初始化项目">安装 Hexo 工具及初始化项目</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装 hexo-cli</span></span><br><span class="line">cnpm install hexo-cli -g</span><br><span class="line"><span class="comment"># 初始化项目</span></span><br><span class="line">hexo init YourProjectName</span><br><span class="line"><span class="built_in">cd</span> YourProjectName</span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure>
<p>完成项目的初始化后，目录结构如下：</p>
<p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tree -L 2</span></span><br><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── node_modules</span><br><span class="line">│   ├── @types</span><br><span class="line">│   ├── ***</span><br><span class="line">*</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">│   ├── draft.md</span><br><span class="line">│   ├── page.md</span><br><span class="line">│   └── post.md</span><br><span class="line">├── source</span><br><span class="line">│   └── _posts</span><br><span class="line">└── themes</span><br><span class="line">└── landscape</span><br></pre></td></tr></table></figure></p>
<p><code>_config.yml</code> 是整个站点（博客）的配置目录；</p>
<p><code>node_modules</code> 是 node 模块的安装路径；</p>
<p><code>package-lock.json</code> 和 <code>package.json</code> 储存项目所依赖模块的信息；</p>
<p><code>scaffolds</code> 是 Hexo 的脚手架，在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：<code>hexo new photo "My Gallery"</code></p>
<p><code>source</code> 文件夹存放博客文章及页面等</p>
<p><code>themes</code> 存放主题模板</p>
<p>接下来，可通过 <code>hexo server</code> 命令在本地环境下启动临时的 Hexo 服务器，通过 <code>localhost:4000</code> 进行测试访问</p>
<h1 id="部署云端">部署云端</h1>
<h2 id="git-安装与配置">Git 安装与配置</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Debian/Ubuntu | 其他平台可参考：https://git-scm.com/download/</span></span><br><span class="line">sudo apt install git</span><br><span class="line"><span class="comment"># 设置邮箱及用户名</span></span><br><span class="line">git config --global <span class="string">"YourUsername"</span></span><br><span class="line">git config --global <span class="string">"YourEmail"</span></span><br><span class="line"><span class="comment"># 生成 RSA 密钥</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"YourEmail"</span></span><br></pre></td></tr></table></figure>
<p>查看生成的公钥：<code>cat ~/.ssh/id_rsa.pub</code>，复制并导入到 Github 账户，地址：https://github.com/settings/keys</p>
<p>测试密钥：<code>ssh -T git@github.com</code></p>
<p>修改博客站点配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./_config.yml</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="comment"># 先在 Github 创建新的仓库，并命名为：YourUsername.github.io</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/YourUsername/YourUserbame.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<h2 id="添加域名">添加域名</h2>
<p>参考 Github 官方文档：<a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site" target="_blank" rel="noopener">点我</a></p>
<h2 id="推送文章">推送文章</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建文章</span></span><br><span class="line">hexo new post <span class="string">"TITLE"</span></span><br><span class="line"><span class="comment"># 编辑文章并推送</span></span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>访问设置的域名或者 https://YourUsername.github.io/ 即可看到博客站点</p>
<h1 id="配置主题">配置主题</h1>
<h2 id="主题选择">主题选择</h2>
<p>推荐：</p>
<ul>
<li><a href="https://github.com/next-theme/hexo-theme-next" target="_blank" rel="noopener">NexT</a></li>
<li><a href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener">Butterfly</a></li>
<li><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a></li>
<li><a href="https://github.com/cofess/hexo-theme-pure" target="_blank" rel="noopener">pure</a></li>
<li><a href="https://github.com/Molunerfinn/hexo-theme-melody" target="_blank" rel="noopener">Melody</a></li>
</ul>
<p>更多主题可到 Hexo 社区去选择下载：https://hexo.io/themes/</p>
<p>安装 NexT：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> YourProjectName</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<h2 id="配置站点及主题">配置站点及主题</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./_config.yml</span></span><br><span class="line"><span class="comment"># 站点信息</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Blog_Name</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">'YourChoice'</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">'Your Description</span></span><br><span class="line"><span class="string">keywords: YourKeyWord</span></span><br><span class="line"><span class="string">author: YourName</span></span><br><span class="line"><span class="string">url: https://yourdomain.domain</span></span><br><span class="line"><span class="string"># 有的主题是 zh-Hans，具体请看主题文档</span></span><br><span class="line"><span class="string">language: zh-CN</span></span><br><span class="line"><span class="string">timezone: '</span><span class="string">Asia/Shanghai'</span></span><br><span class="line"><span class="comment"># 主题选择</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"><span class="comment"># 字符及阅读时长估计</span></span><br><span class="line"><span class="comment"># 要先安装：https://github.com/next-theme/hexo-word-counter</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">"分钟"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./themes/next/_config.yml</span></span><br><span class="line"><span class="comment"># 自定义文件路径</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment"># 自定义 footer 启用 canvas-nest</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.njk</span></span><br><span class="line"><span class="comment"># 网站图标</span></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon.png</span></span><br><span class="line"><span class="comment"># 版权信息</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">language:</span></span><br><span class="line"><span class="comment"># NexT 主题模式</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment"># 菜单，用法：Key: /link/ || icon</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line"><span class="comment"># 用户头像设置</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/half9000_avatar.png</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 社交信息</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/half9000</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:rom-do@outlook.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line"><span class="comment"># 文章设置</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">updated_at:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 使用图标而非 # 显示标签</span></span><br><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 第三方插件：不蒜子统计</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line"><span class="comment"># 2020-11-06 更新：添加 Latex 公式支持</span></span><br><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="comment"># Server-side plugin: https://github.com/next-theme/hexo-filter-mathjax</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>footer 文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ./source/_data/footer.njk --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">color</span>=<span class="string">"0,0,255"</span> <span class="attr">opacity</span>=<span class="string">"0.5"</span> <span class="attr">zIndex</span>=<span class="string">"-1"</span> <span class="attr">count</span>=<span class="string">"99"</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果 <code>./source</code> 路径下不存在 <code>about</code>, <code>categories</code> 等文件夹，需先进行创建：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">"about"</span></span><br><span class="line">hexo new page <span class="string">"categories"</span></span><br><span class="line">hexo new page <span class="string">"tags"</span></span><br></pre></td></tr></table></figure>
<p>并编辑对应目录下的 <code>index.md</code>，添加属性 <code>type: about</code> 等</p>
<h2 id="启用搜索">启用搜索</h2>
<ol type="1">
<li><p><code>cnpm install hexo-generator-searchdb</code> 安装插件</p></li>
<li><p>修改站点配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Search configuration</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改主题配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="启用评论插件">启用评论插件</h2>
<ol type="1">
<li><p>配置 Github</p>
<p>打开链接：<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点我点我</a>，填写相关信息，获取 <code>id</code> 和 <code>secret</code></p>
<p><em>注：Authorization callback URL</em> 应填写博客实际访问的 URL，如本站为 https://blog.half9000.com</p></li>
<li><p>配置主题： <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">YourName</span> <span class="comment"># GitHub repo owner</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">YourName.github.io</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">YourIdD</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">YourSecret</span> <span class="comment"># GitHub Application Client Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">YourAccount</span> <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk's display language depends on user's browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure></p></li>
</ol>
<h1 id="延伸阅读">延伸阅读</h1>
<ul>
<li><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo 官方文档</a></p></li>
<li><p><a href="https://github.com/next-theme/theme-next-docs" target="_blank" rel="noopener">NexT 官方文档</a></p></li>
</ul>
]]></content>
      <categories>
        <category>工欲善其事</category>
      </categories>
      <tags>
        <tag>WSL</tag>
        <tag>Ubuntu</tag>
        <tag>环境配置&amp;部署</tag>
        <tag>Hexo</tag>
        <tag>Github Pages</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Github Actions 自动部署 Hexo 博客</title>
    <url>/2020/06/15/Hexo-GithubPages-Deployment-Github-Actions-CI-CD/</url>
    <content><![CDATA[<h1 id="写在前面">写在前面：</h1>
<p>使用 <code>Hexo</code> 进行博客写作非常方便：</p>
<ol type="1">
<li><code>hexo new post "TITLE"</code> 新建文章</li>
<li><code>hexo g</code> 生成静态页面</li>
<li><code>hexo d</code> 部署页面</li>
</ol>
<p>美中不足的是，一旦切换写作环境或者数据丢失，原始的文章及相关配置难以同步备份。</p>
<p>对于需要备份的文档等小体积文件，较为通用的做法是使用 <code>Git</code> 进行版本控制，并托管项目到免费开放平台，如 Github, Gitee, Gitlab 等。</p>
<blockquote>
<p>懒，是第一生产力！</p>
</blockquote>
<p>那么，对于博客写作来说，在提交新改动后，<strong><em>自动化</em></strong> 发布文章是更便捷的做法。</p>
<h1 id="使用-github-actions-自动化部署博客">使用 Github Actions 自动化部署博客</h1>
<h2 id="github-actions-介绍">Github Actions 介绍</h2>
<p>Github Actions 是 Github 推出的持续集成/持续交付或部署 （CI/CD）工具。它能够与 Github 上的项目无缝结合，十分好用。</p>
<blockquote>
<p>GitHub Actions enables you to create custom software development life cycle (SDLC) workflows directly in your GitHub repository.</p>
<p>GitHub Actions 可以让你直接在 GitHub 仓库中创建自定义的软件开发生命周期 (SDLC) 工作流程。</p>
</blockquote>
<p>Github Actions 有很丰富的玩法，如：自动化构建基于项目的 Docker 镜像并发布，自动编译最新的 LEDE 固件等。</p>
<p>本篇仅介绍使用 Github Actions 自动发布博客文章。</p>
<a id="more"></a>
<h2 id="相关配置与用法">相关配置与用法</h2>
<p>首先生成 RSA 非对称密钥对：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">'YourEmail'</span> -f <span class="string">"DEPLOY_KEY"</span></span><br></pre></td></tr></table></figure>
<p>复制公钥，并在博客文章对应的 repo (xxx.github.io) 里填写：repo =&gt; settings =&gt; Deploy keys，命名随意</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clip &lt; DEPLOY_KEY.pub</span><br></pre></td></tr></table></figure>
<p>复制私钥，并在博客项目对应的 repo 里填写：repo =&gt; settings =&gt; secrets, 并命名为 DEPLOY_KEY</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clip &lt; DEPLOY_KEY</span><br></pre></td></tr></table></figure>
<p>在博客项目下，初始化 git 仓库：<code>git init</code> ，并与 Github 上的远程仓库连接：<code>git remote add origin YourRepoURL</code>（建议设置为私密仓库）</p>
<p>创建并编辑 <code>./github/workflows/actions.yml</code>文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./github/workflows/actions.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="string">environment</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v2-beta</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">'12'</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">pandoc</span> <span class="string">(Latex</span> <span class="string">support)</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">wget</span> <span class="string">-O</span> <span class="string">pandoc.deb</span> <span class="string">https://github.com/jgm/pandoc/releases/download/2.11.1/pandoc-2.11.1-1-amd64.deb</span></span><br><span class="line">        <span class="string">sudo</span> <span class="string">dpkg</span> <span class="string">-i</span> <span class="string">pandoc.deb</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">git</span> <span class="string">environment</span></span><br><span class="line">      <span class="attr">env:</span> </span><br><span class="line">        <span class="comment"># 1. Add this private key and title as DEPLOY_KEY in this repo -&gt; settings/secrets</span></span><br><span class="line">        <span class="comment"># 2. Add corresponding public key and named as any text to the github page repo -&gt; settings/deploy keys</span></span><br><span class="line">        <span class="attr">DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">USERNAME:</span> <span class="string">YourUsername!CHANGEME</span></span><br><span class="line">        <span class="attr">EMAIL:</span> <span class="string">YourEmail!CHANGEME</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">"$DEPLOY_KEY"</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">        <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">        <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">"$USERNAME"</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">"$EMAIL"</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">environment</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure>
<p>在创建或者改动文章及配置后，使用 git 进行提交，并推送至远程 <code>master</code> 分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"Update ..."</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p>在远程仓库接收到推送后，Github Actions 会进入该工作流，按照设定更新博客文章。</p>
<p><strong><em>注：</em></strong></p>
<ol type="1">
<li>在项目的 <code>_config.yml</code> 需把 Git 的 repo地址设置为 SSH 格式：<code>git@github.com:YourName/YourRepo.git</code>，使用 HTTPS 格式的 repo 地址会造成部署失败。</li>
<li>如果主题模板目录含有 <code>.git</code> 文件夹，需删除该目录，否则会造成渲染静态页面失败。</li>
</ol>
<h2 id="延伸阅读">延伸阅读</h2>
<p><a href="https://help.github.com/en/actions" target="_blank" rel="noopener">Github Actions 官方文档</a> （可选中文）</p>
<p><code>actions.yml</code> <a href="https://gist.github.com/Half9000/7d83d7f8dea012926dc7d2203a1f169e" target="_blank" rel="noopener">持久更新链接</a></p>
]]></content>
      <categories>
        <category>工欲善其事</category>
      </categories>
      <tags>
        <tag>环境配置&amp;部署</tag>
        <tag>Hexo</tag>
        <tag>Github Pages</tag>
        <tag>CI/CD</tag>
        <tag>Github Actions</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode(#2) 两数相加-题解笔记 (Python)</title>
    <url>/2020/11/05/LeetCode-AddTwoNumers-Solution/</url>
    <content><![CDATA[<h2 id="两数相加"><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">2. 两数相加</a></h2>
<p>给出两个 <strong>非空</strong> 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 <strong>一位</strong> 数字。</p>
<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>
<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 &#x3D; 807</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="方法一">方法一：</h2>
<p>一个偷懒的做法：</p>
<p>首先遍历链表得到两个数字，<code>num1</code> 和 <code>num2</code>，相加得到数字 <code>num</code> 。然后根据相加之后的数字构建链表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1 <span class="keyword">or</span> <span class="keyword">not</span> l2:</span><br><span class="line">            res = l1 <span class="keyword">if</span> <span class="keyword">not</span> l2 <span class="keyword">else</span> l1</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        num1 = <span class="number">0</span></span><br><span class="line">        num2 = <span class="number">0</span></span><br><span class="line">        h1 = l1</span><br><span class="line">        h2 = l2</span><br><span class="line">        step = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> h1:</span><br><span class="line">            num1 += h1.val * (<span class="number">10</span>**step)</span><br><span class="line">            h1 = h1.next</span><br><span class="line">            step += <span class="number">1</span></span><br><span class="line">        step = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> h2:</span><br><span class="line">            num2 += h2.val * (<span class="number">10</span>**step)</span><br><span class="line">            h2 = h2.next</span><br><span class="line">            step += <span class="number">1</span></span><br><span class="line">        num = num1 + num2</span><br><span class="line">        head = ListNode()</span><br><span class="line">        node = head</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> str(num)[::<span class="number">-1</span>]:</span><br><span class="line">            node.next = ListNode(int(x))</span><br><span class="line">            node = node.next</span><br><span class="line">        <span class="keyword">return</span> head.next</span><br></pre></td></tr></table></figure>
<h2 id="方法二">方法二：</h2>
<p>考虑到数字相加会产生进位，用 <code>incr</code> 来储存进位的信息：<code>incr = (node1.val + node2.val + incr) // 10</code>，用 <code>val = (node1.val + node2.val + incr)%10</code> 储存节点值。</p>
<p>在这里可以用递归的思路来解题，定义一个辅助函数：计算 <code>val</code> 和 <code>incr</code>，然后构建 <code>ListNode</code>, 把 <code>incr</code>信息传递给下一个 <code>ListNode</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">recur</span><span class="params">(l1, l2, incr)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> l1 <span class="keyword">and</span> <span class="keyword">not</span> l2 <span class="keyword">and</span> <span class="keyword">not</span> incr: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            val1 = l1.val <span class="keyword">if</span> l1 <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            val2 = l2.val <span class="keyword">if</span> l2 <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            s = val1 + val2 + incr</span><br><span class="line">            val = s % <span class="number">10</span></span><br><span class="line">            incr = s // <span class="number">10</span></span><br><span class="line">            node = ListNode(val)</span><br><span class="line">            next1 = l1.next <span class="keyword">if</span> l1 <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            next2 = l2.next <span class="keyword">if</span> l2 <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">            node.next = recur(next1, next2, incr)</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        <span class="keyword">return</span> recur(l1, l2, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>力扣笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
        <tag>题解笔记</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode(#200) 岛屿数量问题-题解笔记 (Python)</title>
    <url>/2020/11/06/LeetCode-NumberofIslands-Solution/</url>
    <content><![CDATA[<h2 id="岛屿数量"><a href="https://leetcode-cn.com/problems/number-of-islands/" target="_blank" rel="noopener">200. 岛屿数量</a></h2>
<p>给你一个由 <code>'1'</code>（陆地）和 <code>'0'</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p>
<p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p>
<p>此外，你可以假设该网格的四条边均被水包围。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：grid &#x3D; [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]</span><br><span class="line">]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：grid &#x3D; [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]</span><br><span class="line">]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>m == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 300</code></li>
<li><code>grid[i][j]</code> 的值为 <code>'0'</code> 或 <code>'1'</code></li>
</ul>
<a id="more"></a>
<h2 id="方法一深度优先搜索-dfs">方法一：深度优先搜索 (DFS)</h2>
<p><strong>目标</strong>：给定一个二维网格，求 <code>'1'</code> 的数量，其中，竖向和横向上相邻的 <code>'1'</code> 被视为一个。</p>
<p><strong>思路</strong>：首先想到的是最简单的方法，遍历整个网格，遇到为 <code>'1'</code> 的网格，向它的上下左右四个方向深入搜索。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands</span><span class="params">(self, grid: List[List[str]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 计数器初始化为 0</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        rowsn = len(grid)</span><br><span class="line">        colsn = len(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(i,j)</span>:</span></span><br><span class="line">            <span class="comment"># 边界条件</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ( <span class="number">0</span>&lt;=i&lt;rowsn <span class="keyword">and</span> <span class="number">0</span>&lt;=j&lt;colsn <span class="keyword">and</span> grid[i][j] == <span class="string">'1'</span>):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 记录访问过的网格</span></span><br><span class="line">            grid[i][j] = <span class="string">'2'</span></span><br><span class="line">            <span class="comment"># 遍历网格的四个邻居</span></span><br><span class="line">            dfs(i+<span class="number">1</span>,j)</span><br><span class="line">            dfs(i<span class="number">-1</span>,j)</span><br><span class="line">            dfs(i,j+<span class="number">1</span>)</span><br><span class="line">            dfs(i,j<span class="number">-1</span>)</span><br><span class="line">        <span class="comment"># 遍历整个网格</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(rowsn):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(colsn):</span><br><span class="line">                <span class="keyword">if</span>  grid[i][j] == <span class="string">'1'</span>:</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">                    dfs(i,j)</span><br><span class="line">        <span class="keyword">return</span> cnt</span><br></pre></td></tr></table></figure>
<p><strong>时间复杂度：</strong> <span class="math inline">\(O(MN)\)</span>，其中，<span class="math inline">\(M,N\)</span> 分别为网格的行数和列数，也既网格的数量大小。</p>
<p><strong>空间复杂度：</strong> <span class="math inline">\(O(MN)\)</span>，DFS 的最大层数也为网格的数量大小。</p>
<h2 id="方法二广度优先搜索bfs">方法二：广度优先搜索(BFS)</h2>
<p>类似地，可以想到，DFS 的解法往往会伴随着 BFS 的解法。</p>
<p>在这里，使用队列作为辅助，实现本题的 BFS 解法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands</span><span class="params">(self, grid: List[List[str]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 计数器初始化为 0</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        rowsn = len(grid)</span><br><span class="line">        colsn = len(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 上下左右四个邻居</span></span><br><span class="line">        choices = ((<span class="number">1</span>,<span class="number">0</span>),(<span class="number">-1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">0</span>,<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(i,j)</span>:</span></span><br><span class="line">            <span class="comment"># 使用双端队列，优化时间效率</span></span><br><span class="line">            q = collections.deque()</span><br><span class="line">            q.append((i,j))</span><br><span class="line">            <span class="keyword">while</span> q:</span><br><span class="line">                i, j = q.popleft()</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= i &lt; rowsn <span class="keyword">and</span> <span class="number">0</span> &lt;= j &lt; colsn <span class="keyword">and</span> grid[i][j] == <span class="string">'1'</span>:</span><br><span class="line">                    grid[i][j] = <span class="string">'2'</span></span><br><span class="line">                    <span class="keyword">for</span> di, dj <span class="keyword">in</span> choices:</span><br><span class="line">                        q.append((i+di,j+dj))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历整个网格</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(rowsn):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(colsn):</span><br><span class="line">                <span class="keyword">if</span>  grid[i][j] == <span class="string">'1'</span>:</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">                    bfs(i,j)</span><br><span class="line">        <span class="keyword">return</span> cnt</span><br></pre></td></tr></table></figure>
<p><strong>时间复杂度：</strong> <span class="math inline">\(O(MN)\)</span></p>
<p><strong>空间复杂度：</strong> <span class="math inline">\(O(min(M,N))\)</span>，在最坏情况下，队列的大小为<span class="math inline">\(min(M,N)\)</span></p>
<h2 id="方法三并查集">方法三：并查集</h2>
<p>连通性问题一般可以想到使用「并查集」的数据结构。</p>
<blockquote>
<p>关于并查集的相关知识，可以查看 Robert Sedgewick 所著的《算法（第4版）》一书中的第一章第五节。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UF</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.count = n</span><br><span class="line">        self.parent = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        self.size = [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, p, q)</span>:</span></span><br><span class="line">        rootp = self.find(p)</span><br><span class="line">        rootq = self.find(q)</span><br><span class="line">        <span class="keyword">if</span> rootp == rootq: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 平衡性优化, 基于 size</span></span><br><span class="line">        <span class="keyword">if</span> self.size[rootp] &gt; self.size[rootq]:</span><br><span class="line">            self.parent[rootq] = rootp</span><br><span class="line">            self.size[rootp] += self.size[rootq]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.parent[rootp] = rootq</span><br><span class="line">            self.size[rootq] += self.size[rootp]</span><br><span class="line">        self.count -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> x != self.parent[x]:</span><br><span class="line">            <span class="comment"># 路径压缩</span></span><br><span class="line">            self.parent[x] = self.parent[self.parent[x]]</span><br><span class="line">            x = self.parent[x]</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_connected</span><span class="params">(self, p, q)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.find(p) == self.find(q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands</span><span class="params">(self, grid: List[List[str]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        rowsn = len(grid)</span><br><span class="line">        colsn = len(grid[<span class="number">0</span>])</span><br><span class="line">        uf = UF(rowsn*colsn)</span><br><span class="line">        <span class="comment"># 统计'1'的个数：</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(rowsn):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(colsn):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="string">'1'</span>: cnt += <span class="number">1</span></span><br><span class="line">        uf.count = cnt</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(rowsn):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(colsn):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="string">'1'</span>:</span><br><span class="line">                    <span class="comment"># 标记探索过的网格</span></span><br><span class="line">                    grid[i][j] = <span class="string">'2'</span></span><br><span class="line">                    <span class="comment"># 只需向右下方查看合并</span></span><br><span class="line">                    <span class="keyword">for</span> di, dj <span class="keyword">in</span> ((<span class="number">0</span>,<span class="number">1</span>), (<span class="number">1</span>,<span class="number">0</span>)):</span><br><span class="line">                        ii = i + di</span><br><span class="line">                        jj = j + dj</span><br><span class="line">                        <span class="keyword">if</span> <span class="number">0</span> &lt;= ii &lt; rowsn <span class="keyword">and</span> <span class="number">0</span> &lt;= jj &lt; colsn <span class="keyword">and</span> grid[ii][jj] == <span class="string">'1'</span>:</span><br><span class="line">                            uf.union(i*colsn+j, ii*colsn+jj)</span><br><span class="line">        <span class="keyword">return</span> uf.count</span><br></pre></td></tr></table></figure>
<p><strong>空间复杂度：</strong> <span class="math inline">\(O(MN)\)</span></p>
<p><strong>时间复杂度：</strong> <span class="math inline">\(O(log* n)\)</span>，证明略，<span class="math inline">\(log*n\)</span> 为<a href="https://en.wikipedia.org/wiki/Iterated_logarithm" target="_blank" rel="noopener">Iterated logarithm</a></p>
]]></content>
      <categories>
        <category>力扣笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
        <tag>题解笔记</tag>
        <tag>Algorithms</tag>
        <tag>并查集</tag>
        <tag>Data Structures</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode(#1) 两数之和-题解笔记 (Python)</title>
    <url>/2020/11/05/LeetCode-TwoSum-Solution/</url>
    <content><![CDATA[<blockquote>
<p>在整理资料的时候，突然想起来还有个将近半年未更的博客。经历了这几个月惨无人道的秋招，终于明确自己最大的缺点： 问啥啥不会。痛定思痛之后，决定开始学习并记录，顺便恢复博客的更新。<del>（毕竟域名快到期了）</del></p>
</blockquote>
<h2 id="两数之和"><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">1. 两数之和</a></h2>
<p>给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code>，请你在该数组中找出和为目标值的那 <strong>两个</strong> 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>
<p><strong>示例:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="方法一">方法一：</h2>
<p>最先想到的自然是暴力双循环，时间复杂度为<span class="math inline">\(O(n^2)\)</span>，空间复杂度为<span class="math inline">\(O(1)\)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[j] == target:</span><br><span class="line">                    <span class="keyword">return</span> [i, j]</span><br></pre></td></tr></table></figure>
<h2 id="方法二">方法二：</h2>
<p>采用哈希表辅助的方法，时间复杂度为<span class="math inline">\(O(n)\)</span>，空间复杂度为<span class="math inline">\(O(n)\)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">        num_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="keyword">in</span> num_dict:</span><br><span class="line">                <span class="keyword">return</span> [num_dict[nums[i]],i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_dict[target - nums[i]] = i</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结：</h2>
<p>方法一用的是暴力枚举法，分析一下思路可以知道寻找 <code>nums[i] + nums[j] == target</code> 项较为耗时。此时可以想到，常见的时间复杂度优化思路有空间换取时间。由此，可以采用哈希表储存 <code>num_dict[target - nums[i]]</code> 对应的数组索引，这样一来，寻找<code>nums[i] + nums[j] == target</code> 的耗时即为常数时间。</p>
<p>本题为经典的空间换取时间的优化方式。</p>
]]></content>
      <categories>
        <category>力扣笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>LeetCode</tag>
        <tag>题解笔记</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
</search>
